{"version":3,"sources":["api.js","components/trie.js","components/TickerList.js","components/FinancialRatios.js","components/Graph.js","components/NewsAPI.js","components/RenderAll.js","App.js","serviceWorker.js","index.js"],"names":["getTicker","ticker","a","url","fetch","method","headers","result","json","data","price","volume","lastTradingDate","changePercent","overviewData","dailyData","historicalDataThirty","historicalDataNinety","newsAPI","createNode","ch","this","isTerminal","map","words","add","str","i","root","length","push","TickerList","props","handleDisplayChange","e","setState","currentDisplay","target","value","onChange","tickerArr","tickerData","toUpperCase","suggestions","suggest","newTicker","slice","onSubmit","preventDefault","state","newestTicker","tickerList","Object","entries","containsTicker","submittedTicker","undefined","alert","localStorage","setItem","JSON","stringify","suggestionSubmit","clickedSuggestion","textContent","containsTickerv2","setActive","setActiveTicker","removeTicker","itemToBeRemoved","newState","prevState","iterate","localtickerList","getItem","localtickerListObj","parse","suggestionMap","suggestion","className","key","onClick","tickerMap","item","Math","sign","Container","Row","Col","xs","addTickerForm","id","type","placeholder","autoComplete","required","toggles","Component","FinancialRatios","ratioKey","ratioList","showActive","localRatiosList","localRatiosListObj","showEditActive","prevProps","activeTicker","ratioData","checkBoxes","checked","dataValue","hasOwnProperty","Graph","clickHandlers","handleClickDaily","handleClickThirty","handleClickNinety","graphedDays","dataPointsNeeded","updateData","refresh","dailyXData","parsed","yAxisArr","values","dailyDataArr","splice","reverse","dailyxAxisData","keys","dailyYData","monthlyXData","oneMonthDataPoints","monthlyxAxisData","monthlyYData","threeMonthXData","threeMonthDataPoints","threeMonthxAxisData","threeMonthYData","X","Y","labels","graphedDaysFunc","config","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","fluid","options","maintainAspectRatio","responsive","height","NewsAPI","updateLinks","articleDict","articles","forEach","article","publishedAt","publisher","source","name","title","imgURL","urlToImage","publishDate","ordered","sort","newsList","img","src","width","style","objectFit","columnOneItems","columnTwoItems","href","xl","lg","md","RenderAll","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ab84e6a2.chunk.js","sourcesContent":["\nexport async function getTicker(ticker) {\n    const url = 'https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=' + ticker + '&apikey=TDYHB4DGZLP62GJE&datatype=json'\n    const result = await fetch(url, {\n        method: 'GET',\n        headers: {\n            'Accept' : 'application/json',\n            'Content-Type':'application/json',\n        }\n    })\n    const data = await result.json()\n    return {\n        ticker: data[\"Global Quote\"][\"01. symbol\"],\n        price: '$' + data[\"Global Quote\"][\"05. price\"],\n        volume: data[\"Global Quote\"][\"06. volume\"],\n        lastTradingDate: data[\"Global Quote\"][\"07. latest trading day\"],\n        changePercent:  data[\"Global Quote\"][\"10. change percent\"]\n    }\n} \n\nexport async function overviewData(ticker) {\n    const url = 'https://www.alphavantage.co/query?function=OVERVIEW&symbol=' + ticker + '&apikey=TDYHB4DGZLP62GJE&datatype=json'\n    const result = await fetch(url, {\n        method: 'GET',\n        headers: {\n            'Accept' : 'application/json',\n            'Content-Type':'application/json',\n        }\n    })\n   return await result.json()\n\n}\n\nexport async function dailyData(ticker) {\n    const url = 'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=' + ticker + '&interval=5min&apikey=TDYHB4DGZLP62GJE&datatype=json'\n    const result = await fetch(url, {\n        method: 'GET',\n        headers: {\n            'Accept' : 'application/json',\n            'Content-Type':'application/json',\n        }\n    }) \n   return await result.json()\n}\n\nexport async function historicalDataThirty(ticker) {\n    const url = 'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=' + ticker + '&apikey=TDYHB4DGZLP62GJE&datatype=json'\n    const result = await fetch(url, {\n        method: 'GET',\n        headers: {\n            'Accept' : 'application/json',\n            'Content-Type':'application/json',\n        }\n    }) \n   return await result.json()\n\n}\n\nexport async function historicalDataNinety(ticker) {\n    const url = 'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=' + ticker + '&outputsize=full&apikey=TDYHB4DGZLP62GJE&datatype=json'\n    const result = await fetch(url, {\n        method: 'GET',\n        headers: {\n            'Accept' : 'application/json',\n            'Content-Type':'application/json',\n        }\n    }) \n   return await result.json()\n}\n\n\nexport async function newsAPI(ticker) {\n    const url = 'https://newsapi.org/v2/everything?' +'q=' + ticker + '&' + 'sortyBy=popularity' + '&' + 'apiKey=7339cb8efbde43e7b74b3a32535367a7'\n    const result = await fetch(url, {\n        method: 'GET',\n        headers: {\n            'Accept' : 'application/json',\n        }\n    }) \n   return await result.json()\n}","export function createNode(ch) {\n    this.ch = ch\n    this.isTerminal = false\n    this.map = {}\n    this.words = []\n}\n\nexport function add(str, i, root) {\n\n    if(i === str.length) {\n        root.isTerminal = true\n        return \n    }\n\n    if(!root.map[str[i]]) \n        root.map[str[i]] = new createNode(str[i])\n    \n    root.words.push(str)\n    add(str, i + 1, root.map[str[i]])\n}\n\nexport function suggest(str, i, root) {\n\n    if(i === str.length)  \n        return root.words\n    \n    if(!root.map[str[i]]){\n        return []\n    }\n    return suggest(str, i + 1, root.map[str[i]])\n} ","import React, { Component } from 'react'\nimport { getTicker } from '../api.js'\nimport './components.css'\nimport { createNode, add, suggest } from './trie'\nimport tickerData from '../common_stocks/aggregate.json'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container  from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport { cleanup } from '@testing-library/react'\n\n\n\n\nclass TickerList extends Component {\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n            newTicker: '',\n            currentDisplay: 'price',\n            tickerList: [],\n            suggestions: []\n        }\n    }\n\n    componentDidMount() {\n        const localtickerList = localStorage.getItem('localTickers')\n        const localtickerListObj = JSON.parse(localtickerList)\n        if(localtickerListObj) {\n            this.setState({\n                tickerList: localtickerListObj\n            })\n        } else return\n    }\n\n\n    handleDisplayChange = e => {\n        this.setState({\n            currentDisplay: e.target.value\n        })\n    }\n\n\n    onChange = (e) => {\n\n        // CREATE TICKER ARRAY FROM JSON DATA\n\n        let tickerArr = []\n        for(const ticker of tickerData) {\n            tickerArr.push(ticker[\"Symbol\"])\n        }\n\n        // const tickerDataDict = {}\n        // tickerData.forEach((company) => {\n        //     tickerDataDict[company[\"Symbol\"]] = {\n        //         symbol: company['Symbol'],\n        //         name: company['Name']\n        //     }\n        // })\n\n        // Commented out above is a working dictionary of ticker items. Decided to to just render simple array for trie  \n\n\n        // INSTANTIATE ROOT AND POPULATE TRIE TREE\n\n        const root = new createNode(null)\n\n        for(const ticker of tickerArr) {\n            add(ticker, 0, root)\n        }\n\n        //  CALL SUGGEST() ON INPUT VALUE AND SET SUGGESTION STATE FOR JSX MAP / RENDER\n\n        const str = e.target.value.toUpperCase()\n    \n        const suggestions = suggest(str, 0, root)\n\n        this.setState({\n            newTicker: e.target.value,\n            suggestions: suggestions.slice(0,10)\n        })\n\n        // RESET SUGGESTION ARRAY\n\n        if(str.length === 0){ \n            this.setState({\n                suggestions: ''\n            })\n        } \n    }\n\n    onSubmit = async (e) => {   \n        e.preventDefault()\n        const newestTicker = await getTicker(this.state.newTicker)\n        const tickerList = Object.entries(this.state.tickerList)\n\n        const containsTicker = (submittedTicker) => {\n            for(let i = 0; i < tickerList.length; i++) {\n                if(tickerList[i][1][\"ticker\"] === submittedTicker) {\n                    return true\n                }\n            }\n            return false\n        } \n\n        // I should consider making use of forEach in containsTicker instead of a for loop.\n        // I should also consider cleaning up the logic of below for. Namely newestTicker[\"ticker\"]. \n\n        if(newestTicker[\"ticker\"] === undefined) {\n            alert(\"Please enter a valid ticker\")\n        } else if(containsTicker(newestTicker[\"ticker\"])) { \n            alert(\"That ticker is already in your list\")\n        } else {\n                this.setState({\n                    tickerList: [...this.state.tickerList, newestTicker],\n                    suggestions: '',\n                    newTicker: ''\n                    })\n                localStorage.setItem('localTickers', JSON.stringify(this.state.tickerList))   \n            }\n    }\n\n    // Below is the suggestion box submit logic, needs cleaning / condesing from the above \n\n    suggestionSubmit = async (e) => {\n        const clickedSuggestion = e.target.textContent       \n        const newestTicker = await getTicker(clickedSuggestion)\n        const tickerList = this.state.tickerList\n        const containsTickerv2 = (submittedTicker) => {\n            for(let i = 0; i < tickerList.length; i++) {\n                if(tickerList[i][\"ticker\"] === clickedSuggestion) {\n                    return true\n                }\n            }\n            return false\n        } \n\n        if(clickedSuggestion === undefined) {\n            alert(\"Please enter a valid ticker\")\n        } else if (containsTickerv2(clickedSuggestion)) {\n            alert(\"That ticker is already in your list\")\n        } else {\n            this.setState({\n                tickerList: [...this.state.tickerList, newestTicker],\n                suggestions: '',\n                newTicker: ''\n                })\n            localStorage.setItem('localTickers', JSON.stringify(this.state.tickerList))  \n        }    \n    }\n\n\n    setActive = (ticker) => {\n        return () => this.props.setActiveTicker(ticker)\n    }\n\n    // I should rewrite the removeTicker() fuction with forEach() or filter() ... the for loop and .push() usage is just sad. \n\n    removeTicker = (itemToBeRemoved) => {\n        return () => {\n            const newState = []\n            function iterate(prevState) {\n                for(let i = 0; i <prevState.length; i++) {\n                    if(prevState[i][\"ticker\"] !== itemToBeRemoved) {\n                        newState.push(prevState[i])\n                    } \n                }\n                return newState\n            }\n\n            iterate(this.state.tickerList)\n\n            this.setState({\n                tickerList: newState\n            })\n            localStorage.setItem('localTickers', JSON.stringify(newState))\n        }\n    }\n    \n    render() {\n\n        const tickerList = this.state.tickerList\n        const suggestions = this.state.suggestions\n\n   \n        const suggestionMap = suggestions === '' ? null : suggestions.map((suggestion) => {\n            return <div className=\"suggestion-row-item\" key={suggestion} value={suggestion} onClick={this.suggestionSubmit}>{suggestion}</div>\n        })\n\n        \n        const tickerMap = tickerList.map((item) => {\n            let value = item.price\n            if(this.state.currentDisplay === \"percentChange\") {\n                value = Math.sign(item.changePercent.slice(0,item.changePercent.length - 1)) === 1 ? '+' + item.changePercent : item.changePercent   \n            }\n            return <Container key={item.ticker}>\n                        <Row>  \n                            <Col className=\"ticker-row\" onClick={this.setActive(item.ticker)} > \n                                <span className=\"ticker-name float-left\"> {item.ticker} </span> \n                                <span className=\"float-right\">  {value} </span> \n                            </Col>\n                            <Col xs={1}> \n                                <button className=\"remove-ticker-btns\" onClick={this.removeTicker(item.ticker)}>x</button>\n                            </Col>\n                        </Row> \n                    </Container>\n             \n        })\n    \n        const addTickerForm =   <div>\n                                        <form onSubmit = {this.onSubmit}> \n                                            <input  id=\"submit-form\"\n                                                    type=\"text\" \n                                                    value={this.state.newTicker} \n                                                    placeholder=\"Add Ticker...\" \n                                                    autoComplete=\"off\" \n                                                    onChange={this.onChange} \n                                                    required/> \n                                            {/* <input id=\"submit-btn\" type=\"submit\" value=\"submit\" /> */}\n                                        </form>\n                                </div>\n\n        const toggles = <div> \n                            <button className=\"ticker-btns\" value=\"price\" onClick={this.handleDisplayChange}> Price </button>\n                            <button className=\"ticker-btns\" value=\"percentChange\" onClick={this.handleDisplayChange}> Percent </button>\n                        </div> \n\n\n        return  <div className=\"content-container\" id=\"ticker\" >\n\n                        <h5>Stocks</h5>\n\n                        <div className =\"ticker-map-container\"> \n                            <Container>\n                                {tickerMap} \n                            </Container>\n                        </div>\n\n                        <Container className=\"add-ticker-row d-flex justify-content-center\">\n                            <Row> \n                                <Col> \n\n                                    {addTickerForm}\n\n                                    <div className=\"suggestion-box\">\n\n                                            {suggestionMap}\n                                      \n                                    </div>\n                                </Col>\n\n                                <Col> \n                                    {toggles}\n                                </Col>\n                            </Row>\n                        </Container>\n                    </div>\n\n    }\n}\n\nexport default TickerList","import React, { Component } from 'react'\nimport { overviewData } from \"../api.js\"\nimport './components.css'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container  from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\nexport class FinancialRatios extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            currentDisplay: \"showingEditActive\", //showingActive || showingEditActive\n            ratioList: {\n                \"MarketCapitalization\": false,\n                \"EBITDA\": false,\n                \"PERatio\": false,\n                \"PEGRatio\": false,\n                \"BookValue\": false,\n                \"DividendPerShare\": false,\n                \"DividendYield\": false,\n                \"EPS\": false,\n                \"RevenuePerShareTTM\": false,\n                \"ProfitMargin\": false,\n                \"OperatingMarginTTM\": false,\n                \"ReturnOnAssetsTTM\": false,\n                \"ReturnOnEquityTTM\": false,\n                \"RevenueTTM\": false,\n                \"GrossProfitTTM\": false,\n                \"DilutedEPSTTM\": false,\n                \"QuarterlyEarningsGrowthYOY\": false,\n                \"QuarterlyRevenueGrowthYOY\": false,\n                \"AnalystTargetPrice\": false,\n                \"TrailingPE\": false,\n                \"ForwardPE\": false,\n                \"PriceToSalesRatioTTM\": false,\n                \"PriceToBookRatio\": false,\n                \"EVToRevenue\": false,\n                \"EVToEBITDA\": false,\n                \"Beta\": false,\n                \"52WeekHigh\": false,\n                \"52WeekLow\": false,\n                \"50DayMovingAverage\": false,\n                \"200DayMovingAverage\": false,\n                \"SharesOutstanding\": false,\n                \"SharesFloat\": false,\n                \"SharesShort\": false,\n                \"SharesShortPriorMonth\": false,\n                \"ShortRatio\": false,\n                \"ShortPercentOutstanding\": false,\n                \"ShortPercentFloat\": false,\n                \"PercentInsiders\": false,\n                \"PercentInstitutions\": false,\n                \"ForwardAnnualDividendRate\": false,\n                \"ForwardAnnualDividendYield\": false,\n                \"PayoutRatio\": false\n            },\n            data: {}\n        }\n    }   \n\n    componentDidMount(){\n        const localRatiosList = localStorage.getItem('localRatios')\n        const localRatiosListObj = JSON.parse(localRatiosList)\n        if(!localRatiosListObj) {\n            return\n        } else {\n            this.setState({\n                ratioList: localRatiosListObj\n            }) \n        }\n    }\n\n\n    onChange = (ratioKey) => {\n        return () => {\n            this.setState({\n                ratioList: {...this.state.ratioList, [ratioKey]: !this.state.ratioList[ratioKey]}\n            })\n        }\n    }\n\n\n    async componentDidUpdate(prevProps) {\n        if(prevProps.activeTicker !==  this.props.activeTicker) {\n            this.setState({\n                data: await overviewData(this.props.activeTicker)   \n            })\n        }\n        localStorage.setItem('localRatios', JSON.stringify(this.state.ratioList))\n    }\n\n    showActive = () => {\n        if(this.state.currentDisplay === \"showingActive\") return \n        else {\n            const localRatiosList = localStorage.getItem('localRatios')\n            const localRatiosListObj = JSON.parse(localRatiosList)\n            if(localRatiosListObj) {\n                this.setState({\n                    currentDisplay: \"showingActive\",\n                    ratioList: localRatiosListObj\n                })\n            } else {\n                this.setState({\n                    currentDisplay: \"showingActive\"\n                })\n            }\n        }\n    }\n   \n\n    showEditActive = () => {\n        if(this.state.currentDisplay === \"showingEditActive\") return \n        else {\n            this.setState({\n                currentDisplay: \"showingEditActive\"\n            })\n        }\n    }\n\n   \n    \n    render() {\n     \n        const currentDisplay = this.state.currentDisplay\n        const ratioData = []\n        const checkBoxes = []\n\n    \n\n\n        const currentDisplayFunc = () => {\n            if (currentDisplay === \"showingActive\") {\n                return ratioData\n            } else {    \n                return checkBoxes\n            }\n        }\n      \n\n        for (const [key, value] of Object.entries(this.state.ratioList)){\n            \n            checkBoxes.push(<div key={key}> \n                <label> \n                    <input type=\"checkbox\" value={value} checked={value} onChange={this.onChange(key)} /> {key}  \n                </label>  \n            </div>) \n\n            if(!value) continue \n            let dataValue = \"N/A\"\n            if(this.state.data.hasOwnProperty(key)) {\n                dataValue = this.state.data[key] \n            }\n            ratioData.push ( \n                            <Container className=\"ratio-row-item\" key={key}> \n                                <Row> \n                                    <Col className=\"p-0\"> \n                                        <span className=\"ratio-type float-left\"> {key} </span> \n                                    </Col> \n                                    \n                                    <Col className=\"p-0\">\n                                        <span className=\"ratio-value float-right\"> {dataValue} </span> \n                                    </Col>\n                                </Row> \n                            </Container>    \n                                )\n            }   \n\n           \n\n        return (\n            <div className=\"content-container\" id=\"ratios\">\n\n                    <h5> Financial Ratios </h5> \n\n                    <div className=\"ratio-list-container text-align\">\n                      \n                        <Container> \n                            {currentDisplayFunc()}\n                        </Container>\n                        \n                    </div>\n\n                <Container className=\"ratio-btn-container d-flex justify-content-center\">\n                    <Row> \n                        <Col> \n                            <button className=\"ratio-btns\" onClick={this.showActive} > Show Active </button>\n                        </Col>\n\n                        <Col> \n                            <button className=\"ratio-btns\" onClick={this.showEditActive}> Edit Active </button>\n                        </Col>\n                    </Row>\n                </Container>\n\n            </div>\n        )\n    }\n}\n\nexport default FinancialRatios","import React, { Component } from 'react'\nimport { dailyData } from '../api'\nimport { historicalDataThirty } from '../api'\nimport { historicalDataNinety} from '../api'\nimport { Line } from 'react-chartjs-2'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container  from 'react-bootstrap/Container'\n\n\nfunction newChartConfig(labels, data, activeTicker, graphedDaysFunc) {\n    return {\n        labels: labels, \n        datasets: [\n          {\n            label: graphedDaysFunc,\n            fill: false,\n            lineTension: 0,\n            backgroundColor: 'rgba(75,192,192,0.4)',\n            borderColor: '#58c43b',\n            borderCapStyle: 'butt',\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: 'miter',\n            pointBorderColor: 'white',\n            pointBackgroundColor: '#fff',\n            pointBorderWidth: 1,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n            pointHoverBorderColor: 'rgba(220,220,220,1)',\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            data: data\n          }\n        ] \n    }\n}\n\nexport class Graph extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            graphedDays: 30, //initial state is 30 day graph \n            dataPointsNeeded: null,\n            dailyXData: null,\n            monthlyXData: null,\n            threeMonthXData: null,\n            dailyYData: null,\n            monthlyYData: null,\n            threeMonthYData: null\n        }\n    }\n\n\n    clickHandlers = (e) => {\n        if (this.props.activeTicker === undefined) {\n            alert(\"No active ticker seleceted\")\n        } else if(e.target.value === \"one\") {\n            return this.handleClickDaily()\n        } else if (e.target.value === \"thirty\") {\n            return this.handleClickThirty()\n        } else if(e.target.value === \"ninety\") {\n           return this.handleClickNinety()\n        }\n    }\n\n    handleClickDaily = async () => {\n        this.setState({\n            graphedDays:1,\n            dataPointsNeeded: 100 \n        }) \n    }\n    handleClickThirty = async () => {\n\n        this.setState({\n            graphedDays: 30,\n            dataPointsNeeded: 90\n        })\n    }\n    handleClickNinety = async () => {\n        this.setState({\n            graphedDays: 90 ,\n            dataPointsNeeded: 90\n        })\n    }\n\n\n    updateData = async (refresh) => {\n        if (this.props.activeTicker === undefined) return // same as return null \n        \n        if(this.state.graphedDays === 1 ) {\n\n            if(this.state.dailyXData !== null && !refresh) return \n\n            const data = await dailyData(this.props.activeTicker)\n            const parsed = data[\"Time Series (5min)\"]\n            const yAxisArr = Object.values(parsed).map((e) => +e[\"3. low\"])\n            const dailyDataArr = yAxisArr.splice(0, yAxisArr.length).reverse()\n            const dailyxAxisData = Object.keys(parsed).map(e => e.slice(10, parsed.length)).reverse()\n            this.setState({\n                dailyYData:dailyDataArr,\n                dailyXData: dailyxAxisData                \n            })\n        } else if (this.state.graphedDays === 30) {\n\n            if(this.state.monthlyXData !== null && !refresh) return \n\n            const data = await historicalDataThirty(this.props.activeTicker)\n            const parsed = data[\"Time Series (Daily)\"]\n            const yAxisArr = Object.values(parsed).map((e) => +e[\"4. close\"])\n            const oneMonthDataPoints = yAxisArr.splice(0, 30).reverse()\n            const monthlyxAxisData = Object.keys(parsed).map(e => e.slice(5, parsed.length)).splice(0, 30).reverse()\n\n            this.setState({\n                monthlyYData: oneMonthDataPoints,\n                monthlyXData: monthlyxAxisData\n            })\n        } else if (this.state.graphedDays === 90) {\n\n            if(this.state.threeMonthXData !== null && !refresh) return \n\n            const data = await historicalDataNinety(this.props.activeTicker)\n            const parsed = data[\"Time Series (Daily)\"]\n            const yAxisArr = Object.values(parsed).map((e) => +e[\"4. close\"])\n            const threeMonthDataPoints = yAxisArr.splice(0, 90).reverse()\n            const threeMonthxAxisData = Object.keys(parsed).map(e => e.slice(5, parsed.length)).splice(0, 90).reverse()\n\n            this.setState({\n                threeMonthYData: threeMonthDataPoints,\n                threeMonthXData: threeMonthxAxisData\n            })\n        }\n    }\n\n    async componentDidMount() {\n        this.updateData()\n    }\n    \n    async componentDidUpdate(prevProps, prevState) {\n        if (prevProps.activeTicker !== this.props.activeTicker || \n            prevState.graphedDays !== this.state.graphedDays) {\n            this.updateData(prevProps.activeTicker !== this.props.activeTicker)\n        }\n    }\n\n    render() {\n\n        const activeTicker = this.props.activeTicker\n\n        let X = this.state.dailyXData\n        let Y = this.state.dailyYData\n\n        if(this.state.graphedDays === 30) {\n            X = this.state.monthlyXData\n            Y = this.state.monthlyYData\n        } else if ( this.state.graphedDays === 90) {\n            X = this.state.threeMonthXData\n            Y = this.state.threeMonthYData\n        }\n         \n        const graphLabel = () => {\n            if(this.state.graphedDays === null || this.props.activeTicker === undefined) {\n                return \"No active ticker\"\n            } else {\n                return activeTicker.toUpperCase() + ' ' + this.state.graphedDays + ' day graph'\n            }\n        }\n       \n        const config = newChartConfig(X, Y, activeTicker, graphLabel())\n        const options = {\n            maintainAspectRatio: false,\n            responsive: true\n        }\n\n        const graphHeight = 350\n\n        return (\n            <div className=\"content-container\" id=\"graph\">\n\n                <Container fluid> \n                        <Line   \n                            data=       {config} \n                            options=    {options} \n                            height= {graphHeight}\n                        />\n\n                        <div className=\"graph-btn-container\"> \n                            <button className=\"graph-btns\" value=\"one\"      onClick={this.clickHandlers}>1 day</button>\n                            <button className=\"graph-btns\" value=\"thirty\"   onClick={this.clickHandlers}> 30 day </button>\n                            <button className=\"graph-btns\" value=\"ninety\"   onClick={this.clickHandlers}> 90 day</button>\n                        </div>\n                </Container>\n            </div>\n        )\n    }\n}\n\nexport default Graph","import React, { Component } from 'react'\nimport { newsAPI } from '../api'\nimport './components.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container  from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\nexport class NewsAPI extends Component {\n    constructor(props) {\n        super(props)\n        this.state = { \n            newsList:[]\n        }\n    }\n    \n   async componentDidMount(){\n        if(this.props.activeTicker === undefined) {\n            return\n        } else {\n            this.updateLinks()\n        }\n    }\n \n \n    updateLinks = async () => {\n        if(this.props.activeTicker === null || this.props.activeTicker === undefined) {\n            return\n        } else {\n          \n            const data = await newsAPI(this.props.activeTicker)\n           \n            const articleDict = {}\n            data.articles.forEach((article) => {\n                articleDict[article.publishedAt] = {\n                    publisher: article.source.name, \n                    title: article.title,\n                    url: article.url,\n                    imgURL: article.urlToImage,\n                    publishDate: article.publishedAt.slice(0, 10)  \n                }\n            })\n    \n            const ordered = {}\n            Object.keys(articleDict).sort().forEach(function(key){\n                ordered[key] = articleDict[key]\n            })\n            \n            const numbOfArticles = 10\n\n            this.setState({\n                newsList: Object.values(ordered).slice(10, 10 + numbOfArticles).reverse() \n                // in the above set state, reverse method creates descending order of of articles (most recent first)\n                // and the slice method slices out the oldest 10 articles from the api, leaving only the newest 20. \n                // It's worth mentioning that the API sends articles in batches of 20, hence the 10/10 split. \n            })\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if(this.props.activeTicker === undefined) {\n            return\n        } else if(prevProps.activeTicker != this.props.activeTicker){\n            this.updateLinks()\n        }\n    }\n\n\n    render() {\n\n        const newsList = this.state.newsList\n        \n        const newsListMap = newsList.map((item) => {\n\n            const img = <img src={item.imgURL} height=\"50\" width=\"50\" style={{objectFit:\"cover\"}} />\n\n            const columnOneItems =   \n                                    <Container>\n                                        <Row id=\"news-publishers\">  {item.publisher}       </Row> \n                                        <Row id=\"news-publish-date\">  {item.publishDate}   </Row> \n                                        <Row id=\"news-title\">         {item.title}         </Row>\n                                    </Container> \n\n            const columnTwoItems = <div> \n                                        {img}\n                                    </div>\n            \n\n            const format = \n                    <div className=\"news-row-item\" key={item.url}> \n                        <a href={item.url} target =\"_blank\" /* style={{textDecoration:\"none\"}}*/ >\n                            <Row>  \n                                <Col xl={10} lg={10} md={10} xs={10} >\n                                    {columnOneItems}\n                                </Col>\n\n                                <Col xl={2} lg={2} md={2} xs={2} className=\"d-flex align-items-center justify-content-center\">\n                                    {columnTwoItems}\n                                </Col>\n                            </Row>\n                        </a>\n                    </div>    \n\n            return format \n        })\n\n        const newsBanner = () => {\n            if(this.props.activeTicker === null || this.props.activeTicker === undefined) {\n                return <h5> Select ticker for news </h5>\n            } else {\n                return <h5> News for {this.props.activeTicker} </h5>\n            }\n        }\n\n        return (\n            <div className=\"content-container\" id=\"news\">\n\n            <div> {newsBanner()} </div>\n\n            <Container className=\"news-container\"> \n\n                {/* {newsListMap} */}\n                <p>\n                    Unfortunately News API enables CORS only for localhost when using the free / developer model as I have, \n                    thus I cannot dynamically display news articles via this github deployment (unless I pay nearly $500/month). \n                    Please view the source code and / or refer to the portfolio section of my personal website for a video demonstrating the News API as intended :-) \n                    <br></br>\n                    <br></br>\n                    <a href=\"https://www.jaredricardo.io\" target=\"_blank\"> Jaredricardo.io </a>\n                </p>\n            \n            </Container>\n             \n            </div>\n        )\n    }\n}\n\nexport default NewsAPI\n\n\n\n// api key : 7339cb8efbde43e7b74b3a32535367a7\n\n","import React, { Component } from 'react'\nimport TickerList from './TickerList'\nimport FinancialRatios from './FinancialRatios'\nimport Graph from './Graph'\nimport NewsAPI from './/NewsAPI'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container  from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\n\nclass RenderAll extends Component {\n  constructor(props) {\n    super(props)\n  \n    this.state = {\n      activeTicker: this.props.activeTicker\n    }\n  }\n\n    setActiveTicker = (ticker) => {\n    this.setState({\n      activeTicker: ticker\n    })\n  }\n\n  render() {\n    return (\n          <Container fluid className=\"m-0\">\n            {/* COLUMN 1 */}\n            <Row> \n              <Col xl={4} lg={6} md={12} xs={12} className=\"m-0\">\n                  <Row className=\"m-0\">\n                        <TickerList activeTicker = {this.state.activeTicker}\n                                    setActiveTicker = {this.setActiveTicker} /> \n                  </Row>\n                  {/* ROW SPLIT */}\n                  <Row className=\"m-0\"> \n                    <Graph activeTicker = {this.state.activeTicker} />\n                  </Row>\n                </Col>\n                {/* COLUMN 2 */}\n                <Col xl={4} lg={6} md={12} xs={12} className=\"m-0\">\n                  <FinancialRatios activeTicker = {this.state.activeTicker} />\n                </Col>\n                {/* COLUMN 3 */}\n                <Col xl={4} lg={12} md={12} xs={12} className=\"m-0\">\n                  <NewsAPI activeTicker = {this.state.activeTicker} />\n                </Col>\n              </Row>\n          </Container>\n    )\n  }\n}\n\n\nexport default RenderAll;","import React, { Component } from 'react'\nimport RenderAll from './components/RenderAll'\n\n\n\nclass App extends Component {\n  render() {\n    return (\n        <RenderAll />      \n    )\n  }\n}\n\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}