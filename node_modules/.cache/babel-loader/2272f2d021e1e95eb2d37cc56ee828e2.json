{"ast":null,"code":"var _jsxFileName = \"/Users/jaredricardo/Desktop/apps/testing-api/src/components/Graph.js\";\nimport React, { Component } from 'react';\nimport { dailyData } from '../api';\nimport { historicalDataThirty } from '../api';\nimport { historicalDataNinety } from '../api';\nimport { Line } from 'react-chartjs-2';\n\nconst currentTicker = () => {\n  if (activeTicker === null) {\n    return \"There is currently no active ticker\";\n  } else {\n    return activeTicker + \" 30 day dataset\";\n  }\n};\n\nconst test = () => {\n  let testData = [];\n\n  for (let i = 0; i <= 30; i++) {\n    testData.push(i);\n  }\n\n  return testData;\n};\n\nconst test2 = async () => {\n  const data = await historicalDataThirty(this.props.activeTicker);\n  const parsed = data[\"Time Series (Daily)\"];\n  const datesArr = Object.values(parsed).map(e => +e[\"4. close\"]);\n  const oneMonthDataPoints = datesArr.splice(0, 20).reverse();\n  console.log(oneMonthDataPoints);\n};\n\nconst pushNumberOfDays = () => {\n  let labels = [];\n\n  if (graphedDays === 30) {\n    for (let i = 1; i <= 30; i++) {\n      labels.push(i.toString());\n    }\n  } else {\n    for (let i = 1; i <= 90; i++) {\n      labels.push(i.toString());\n    }\n  }\n\n  return labels;\n};\n\nexport class Graph extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = async () => {};\n\n    this.handleClickDaily = async () => {\n      this.setState({\n        graphedDays: 1\n      });\n    };\n\n    this.handleClickThirty = async () => {\n      this.setState({\n        graphedDays: 30\n      });\n    };\n\n    this.handleClickNinety = async () => {\n      this.setState({\n        graphedDays: 90\n      });\n    };\n\n    this.state = {\n      graphedDays: 30,\n      data: {\n        labels: pushNumberOfDays(),\n        datasets: [{\n          label: currentTicker(),\n          fill: false,\n          lineTension: 0.1,\n          backgroundColor: 'rgba(75,192,192,0.4)',\n          borderColor: 'rgba(75,192,192,1)',\n          borderCapStyle: 'butt',\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: 'miter',\n          pointBorderColor: 'rgba(75,192,192,1)',\n          pointBackgroundColor: '#fff',\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\n          pointHoverBorderWidth: 2,\n          pointRadius: 1,\n          pointHitRadius: 10,\n          data: test2()\n        }]\n      }\n    };\n  }\n\n  render() {\n    const activeTicker = this.props.activeTicker;\n    const graphedDays = this.state.graphedDays;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }\n    }, \"test\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleClickDaily,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }\n    }, \"1 day\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleClickThirty,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }\n    }, \" 30 day \"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleClickNinety,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }\n    }, \" 90 day\"), /*#__PURE__*/React.createElement(Line, {\n      data: this.state.data,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\nexport default Graph; // import React, { Component } from 'react'\n// import { dailyData } from '../api'\n// import { historicalDataThirty } from '../api'\n// import { historicalDataNinety} from '../api'\n// import { Line } from 'react-chartjs-2'\n// export class Graph extends Component {\n//     constructor(props) {\n//         super(props)\n//         this.state = {\n//             graphedDays: 30,\n//             data: {}\n//         }\n//     }\n//     handleClick = async () => {\n//     }\n//     handleClickDaily = async () => {\n//         this.setState({\n//             graphedDays:1\n//         })\n//     }\n//     handleClickThirty = async () => {\n//         this.setState({\n//             graphedDays: 30\n//         })\n//     }\n//     handleClickNinety = async () => {\n//         this.setState({\n//             graphedDays: 90\n//         })\n//     }\n//     render() {\n//         const activeTicker = this.props.activeTicker\n//         const graphedDays = this.state.graphedDays\n//         const currentTicker = () => {\n//             if(activeTicker === null) {\n//                 return \"There is currently no active ticker\"\n//             } else {\n//                 return activeTicker + \" 30 day dataset\"\n//             }\n//         }\n//         const test = () => {\n//             let testData = []\n//             for(let i = 0; i <= 30; i++) {\n//                 testData.push(i)\n//             }\n//             return testData\n//         }\n//         const test2 = async () => {\n//             const data = await historicalDataThirty(this.props.activeTicker)\n//             const parsed = data[\"Time Series (Daily)\"]\n//             const datesArr = Object.values(parsed).map((e) => +e[\"4. close\"])\n//             const oneMonthDataPoints = datesArr.splice(0, 20).reverse()\n//             console.log(oneMonthDataPoints)\n//         }\n//         const pushNumberOfDays = () => {\n//             let labels = []\n//             if(graphedDays === 30) {\n//                 for(let i = 1; i <= 30; i++){\n//                     labels.push(i.toString())\n//                 } \n//             } else {\n//                 for(let i = 1; i <= 90; i++) {\n//                     labels.push(i.toString())\n//                 }\n//             }\n//             return labels;\n//         }\n//         const data = {\n//             labels: pushNumberOfDays(),\n//             datasets: [\n//               {\n//                 label: currentTicker(),\n//                 fill: false,\n//                 lineTension: 0.1,\n//                 backgroundColor: 'rgba(75,192,192,0.4)',\n//                 borderColor: 'rgba(75,192,192,1)',\n//                 borderCapStyle: 'butt',\n//                 borderDash: [],\n//                 borderDashOffset: 0.0,\n//                 borderJoinStyle: 'miter',\n//                 pointBorderColor: 'rgba(75,192,192,1)',\n//                 pointBackgroundColor: '#fff',\n//                 pointBorderWidth: 1,\n//                 pointHoverRadius: 5,\n//                 pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n//                 pointHoverBorderColor: 'rgba(220,220,220,1)',\n//                 pointHoverBorderWidth: 2,\n//                 pointRadius: 1,\n//                 pointHitRadius: 10,\n//                 data: test2()\n//               }\n//             ]\n//           };\n//         return (\n//             <div>\n//                 <button onClick={this.handleClick}>test</button>\n//                 <button onClick={this.handleClickDaily}>1 day</button>\n//                 <button onClick={this.handleClickThirty}> 30 day </button>\n//                 <button onClick={this.handleClickNinety}> 90 day</button>\n//                 <Line data={data} />\n//             </div>\n//         )\n//     }\n// }\n// export default Graph","map":{"version":3,"sources":["/Users/jaredricardo/Desktop/apps/testing-api/src/components/Graph.js"],"names":["React","Component","dailyData","historicalDataThirty","historicalDataNinety","Line","currentTicker","activeTicker","test","testData","i","push","test2","data","props","parsed","datesArr","Object","values","map","e","oneMonthDataPoints","splice","reverse","console","log","pushNumberOfDays","labels","graphedDays","toString","Graph","constructor","handleClick","handleClickDaily","setState","handleClickThirty","handleClickNinety","state","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { dailyData } from '../api'\nimport { historicalDataThirty } from '../api'\nimport { historicalDataNinety} from '../api'\nimport { Line } from 'react-chartjs-2'\n\n\nconst currentTicker = () => {\n    if(activeTicker === null) {\n        return \"There is currently no active ticker\"\n    } else {\n        return activeTicker + \" 30 day dataset\"\n    }\n}\n\nconst test = () => {\n    let testData = []\n    for(let i = 0; i <= 30; i++) {\n        testData.push(i)\n    }\n    return testData\n}\n\nconst test2 = async () => {\n    const data = await historicalDataThirty(this.props.activeTicker)\n    const parsed = data[\"Time Series (Daily)\"]\n    const datesArr = Object.values(parsed).map((e) => +e[\"4. close\"])\n    const oneMonthDataPoints = datesArr.splice(0, 20).reverse()\n    console.log(oneMonthDataPoints)\n}\n\nconst pushNumberOfDays = () => {\n    let labels = []\n    if(graphedDays === 30) {\n        for(let i = 1; i <= 30; i++){\n            labels.push(i.toString())\n        } \n    } else {\n        for(let i = 1; i <= 90; i++) {\n            labels.push(i.toString())\n        }\n    }\n    return labels;\n}\n\n\n\nexport class Graph extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            graphedDays: 30,\n            data: {\n                labels: pushNumberOfDays(),\n                datasets: [\n                  {\n                    label: currentTicker(),\n                    fill: false,\n                    lineTension: 0.1,\n                    backgroundColor: 'rgba(75,192,192,0.4)',\n                    borderColor: 'rgba(75,192,192,1)',\n                    borderCapStyle: 'butt',\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    borderJoinStyle: 'miter',\n                    pointBorderColor: 'rgba(75,192,192,1)',\n                    pointBackgroundColor: '#fff',\n                    pointBorderWidth: 1,\n                    pointHoverRadius: 5,\n                    pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n                    pointHoverBorderColor: 'rgba(220,220,220,1)',\n                    pointHoverBorderWidth: 2,\n                    pointRadius: 1,\n                    pointHitRadius: 10,\n                    data: test2()\n                  }\n                ]\n            }\n        }\n    }\n\n  \n\n\n\n    handleClick = async () => {\n        \n    }\n\n    handleClickDaily = async () => {\n        this.setState({\n            graphedDays:1\n        })\n    }\n\n    handleClickThirty = async () => {\n        this.setState({\n            graphedDays: 30\n        })\n    }\n\n    handleClickNinety = async () => {\n        this.setState({\n            graphedDays: 90\n        })\n    }\n\n    \n\n\n    render() {\n\n        const activeTicker = this.props.activeTicker\n        const graphedDays = this.state.graphedDays\n    \n\n\n\n        return (\n            <div>\n                <button onClick={this.handleClick}>test</button>\n                <button onClick={this.handleClickDaily}>1 day</button>\n                <button onClick={this.handleClickThirty}> 30 day </button>\n                <button onClick={this.handleClickNinety}> 90 day</button>\n        \n                <Line data={this.state.data} />\n            </div>\n        )\n    }\n}\n\nexport default Graph\n\n\n\n\n\n\n\n\n\n\n\n// import React, { Component } from 'react'\n// import { dailyData } from '../api'\n// import { historicalDataThirty } from '../api'\n// import { historicalDataNinety} from '../api'\n// import { Line } from 'react-chartjs-2'\n\n\n\n\n// export class Graph extends Component {\n//     constructor(props) {\n//         super(props)\n//         this.state = {\n//             graphedDays: 30,\n//             data: {}\n//         }\n//     }\n\n  \n\n\n\n//     handleClick = async () => {\n        \n//     }\n\n//     handleClickDaily = async () => {\n//         this.setState({\n//             graphedDays:1\n//         })\n//     }\n\n//     handleClickThirty = async () => {\n//         this.setState({\n//             graphedDays: 30\n//         })\n//     }\n\n//     handleClickNinety = async () => {\n//         this.setState({\n//             graphedDays: 90\n//         })\n//     }\n\n    \n\n\n//     render() {\n\n//         const activeTicker = this.props.activeTicker\n//         const graphedDays = this.state.graphedDays\n    \n\n//         const currentTicker = () => {\n//             if(activeTicker === null) {\n//                 return \"There is currently no active ticker\"\n//             } else {\n//                 return activeTicker + \" 30 day dataset\"\n//             }\n//         }\n\n//         const test = () => {\n//             let testData = []\n//             for(let i = 0; i <= 30; i++) {\n//                 testData.push(i)\n//             }\n//             return testData\n//         }\n\n//         const test2 = async () => {\n//             const data = await historicalDataThirty(this.props.activeTicker)\n//             const parsed = data[\"Time Series (Daily)\"]\n//             const datesArr = Object.values(parsed).map((e) => +e[\"4. close\"])\n//             const oneMonthDataPoints = datesArr.splice(0, 20).reverse()\n//             console.log(oneMonthDataPoints)\n//         }\n\n//         const pushNumberOfDays = () => {\n//             let labels = []\n//             if(graphedDays === 30) {\n//                 for(let i = 1; i <= 30; i++){\n//                     labels.push(i.toString())\n//                 } \n//             } else {\n//                 for(let i = 1; i <= 90; i++) {\n//                     labels.push(i.toString())\n//                 }\n//             }\n//             return labels;\n//         }\n\n    \n\n//         const data = {\n//             labels: pushNumberOfDays(),\n//             datasets: [\n//               {\n//                 label: currentTicker(),\n//                 fill: false,\n//                 lineTension: 0.1,\n//                 backgroundColor: 'rgba(75,192,192,0.4)',\n//                 borderColor: 'rgba(75,192,192,1)',\n//                 borderCapStyle: 'butt',\n//                 borderDash: [],\n//                 borderDashOffset: 0.0,\n//                 borderJoinStyle: 'miter',\n//                 pointBorderColor: 'rgba(75,192,192,1)',\n//                 pointBackgroundColor: '#fff',\n//                 pointBorderWidth: 1,\n//                 pointHoverRadius: 5,\n//                 pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n//                 pointHoverBorderColor: 'rgba(220,220,220,1)',\n//                 pointHoverBorderWidth: 2,\n//                 pointRadius: 1,\n//                 pointHitRadius: 10,\n//                 data: test2()\n//               }\n//             ]\n//           };\n\n//         return (\n//             <div>\n//                 <button onClick={this.handleClick}>test</button>\n//                 <button onClick={this.handleClickDaily}>1 day</button>\n//                 <button onClick={this.handleClickThirty}> 30 day </button>\n//                 <button onClick={this.handleClickNinety}> 90 day</button>\n        \n//                 <Line data={data} />\n//             </div>\n//         )\n//     }\n// }\n\n// export default Graph\n"]},"metadata":{},"sourceType":"module"}