{"ast":null,"code":"var _jsxFileName = \"/Users/jaredricardo/Desktop/apps/testing-api/src/components/Graph.js\";\nimport React, { Component } from 'react';\nimport { dailyData } from '../api';\nimport { historicalDataThirty } from '../api';\nimport { historicalDataNinety } from '../api';\nimport { Line } from 'react-chartjs-2';\n\nfunction newChartConfig(labels, data) {\n  return {\n    labels: labels,\n    datasets: [{\n      label: 'CURRENT TICKER day graph',\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: 'rgba(75,192,192,0.4)',\n      borderColor: 'rgba(75,192,192,1)',\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: 'rgba(75,192,192,1)',\n      pointBackgroundColor: '#fff',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n      pointHoverBorderColor: 'rgba(220,220,220,1)',\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: data\n    }]\n  };\n}\n\nexport class Graph extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = async () => {\n      this.setState({\n        data: [11, 55, 11, 55, 11, 55]\n      });\n    };\n\n    this.handleClickDaily = async () => {\n      this.setState({\n        graphedDays: 1\n      });\n    };\n\n    this.handleClickThirty = async () => {\n      this.setState({\n        graphedDays: 30\n      });\n    };\n\n    this.handleClickNinety = async () => {\n      this.setState({\n        graphedDays: 90\n      });\n    };\n\n    this.state = {\n      graphedDays: 30,\n      data: null\n    };\n  }\n\n  async componentDidUpdate(prevProps) {\n    if (prevProps.activeTicker !== this.props.activeTicker) {\n      const data = await historicalDataThirty(this.props.activeTicker);\n      const parsed = data[\"Time Series (Daily)\"];\n      const datesArr = Object.values(parsed).map(e => +e[\"4. close\"]);\n      const oneMonthDataPoints = datesArr.splice(0, 20).reverse();\n      this.setState({\n        data: oneMonthDataPoints\n      });\n    }\n  }\n\n  render() {\n    const activeTicker = this.props.activeTicker;\n\n    const currentTicker = () => {\n      if (activeTicker === null) {\n        return \"There is currently no active ticker\";\n      } else {\n        return activeTicker + \" 30 day dataset\";\n      }\n    };\n\n    const config = newChartConfig(new Array(this.state.graphedDays), this.state.data);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }\n    }, currentTicker()), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }\n    }, \"test\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleClickDaily,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }\n    }, \"1 day\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleClickThirty,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }\n    }, \" 30 day \"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleClickNinety,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }\n    }, \" 90 day\"), /*#__PURE__*/React.createElement(Line, {\n      data: config,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\nexport default Graph; // import React, { Component } from 'react'\n// import { dailyData } from '../api'\n// import { historicalDataThirty } from '../api'\n// import { historicalDataNinety} from '../api'\n// import { Line } from 'react-chartjs-2'\n// export class Graph extends Component {\n//     constructor(props) {\n//         super(props)\n//         this.state = {\n//             graphedDays: 30,\n//             data: {}\n//         }\n//     }\n//     handleClick = async () => {\n//     }\n//     handleClickDaily = async () => {\n//         this.setState({\n//             graphedDays:1\n//         })\n//     }\n//     handleClickThirty = async () => {\n//         this.setState({\n//             graphedDays: 30\n//         })\n//     }\n//     handleClickNinety = async () => {\n//         this.setState({\n//             graphedDays: 90\n//         })\n//     }\n//     render() {\n//         const activeTicker = this.props.activeTicker\n//         const graphedDays = this.state.graphedDays\n//         const currentTicker = () => {\n//             if(activeTicker === null) {\n//                 return \"There is currently no active ticker\"\n//             } else {\n//                 return activeTicker + \" 30 day dataset\"\n//             }\n//         }\n//         const test = () => {\n//             let testData = []\n//             for(let i = 0; i <= 30; i++) {\n//                 testData.push(i)\n//             }\n//             return testData\n//         }\n//         const test2 = async () => {\n//             const data = await historicalDataThirty(this.props.activeTicker)\n//             const parsed = data[\"Time Series (Daily)\"]\n//             const datesArr = Object.values(parsed).map((e) => +e[\"4. close\"])\n//             const oneMonthDataPoints = datesArr.splice(0, 20).reverse()\n//             console.log(oneMonthDataPoints)\n//         }\n//         const pushNumberOfDays = () => {\n//             let labels = []\n//             if(graphedDays === 30) {\n//                 for(let i = 1; i <= 30; i++){\n//                     labels.push(i.toString())\n//                 } \n//             } else {\n//                 for(let i = 1; i <= 90; i++) {\n//                     labels.push(i.toString())\n//                 }\n//             }\n//             return labels;\n//         }\n//         const data = {\n//             labels: pushNumberOfDays(),\n//             datasets: [\n//               {\n//                 label: currentTicker(),\n//                 fill: false,\n//                 lineTension: 0.1,\n//                 backgroundColor: 'rgba(75,192,192,0.4)',\n//                 borderColor: 'rgba(75,192,192,1)',\n//                 borderCapStyle: 'butt',\n//                 borderDash: [],\n//                 borderDashOffset: 0.0,\n//                 borderJoinStyle: 'miter',\n//                 pointBorderColor: 'rgba(75,192,192,1)',\n//                 pointBackgroundColor: '#fff',\n//                 pointBorderWidth: 1,\n//                 pointHoverRadius: 5,\n//                 pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n//                 pointHoverBorderColor: 'rgba(220,220,220,1)',\n//                 pointHoverBorderWidth: 2,\n//                 pointRadius: 1,\n//                 pointHitRadius: 10,\n//                 data: test2()\n//               }\n//             ]\n//           };\n//         return (\n//             <div>\n//                 <button onClick={this.handleClick}>test</button>\n//                 <button onClick={this.handleClickDaily}>1 day</button>\n//                 <button onClick={this.handleClickThirty}> 30 day </button>\n//                 <button onClick={this.handleClickNinety}> 90 day</button>\n//                 <Line data={data} />\n//             </div>\n//         )\n//     }\n// }\n// export default Graph","map":{"version":3,"sources":["/Users/jaredricardo/Desktop/apps/testing-api/src/components/Graph.js"],"names":["React","Component","dailyData","historicalDataThirty","historicalDataNinety","Line","newChartConfig","labels","data","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","Graph","constructor","props","handleClick","setState","handleClickDaily","graphedDays","handleClickThirty","handleClickNinety","state","componentDidUpdate","prevProps","activeTicker","parsed","datesArr","Object","values","map","e","oneMonthDataPoints","splice","reverse","render","currentTicker","config","Array"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { dailyData } from '../api'\nimport { historicalDataThirty } from '../api'\nimport { historicalDataNinety} from '../api'\nimport { Line } from 'react-chartjs-2'\n\nfunction newChartConfig(labels, data) {\n    return {\n        labels: labels,\n        datasets: [\n          {\n            label: 'CURRENT TICKER day graph',\n            fill: false,\n            lineTension: 0.1,\n            backgroundColor: 'rgba(75,192,192,0.4)',\n            borderColor: 'rgba(75,192,192,1)',\n            borderCapStyle: 'butt',\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: 'miter',\n            pointBorderColor: 'rgba(75,192,192,1)',\n            pointBackgroundColor: '#fff',\n            pointBorderWidth: 1,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n            pointHoverBorderColor: 'rgba(220,220,220,1)',\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            data: data\n          }\n        ]\n    }\n}\n\nexport class Graph extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            graphedDays: 30,\n            data: null\n        }\n    }\n\n    handleClick = async () => {\n        this.setState({\n            data: [11,55,11,55,11,55]\n        })\n    }\n\n    handleClickDaily = async () => {\n        this.setState({\n            graphedDays:1\n        })\n    }\n\n    handleClickThirty = async () => {\n        this.setState({\n            graphedDays: 30\n        })\n    }\n\n    handleClickNinety = async () => {\n        this.setState({\n            graphedDays: 90\n        })\n    }\n\n    \n    async componentDidUpdate(prevProps) {\n        if (prevProps.activeTicker !== this.props.activeTicker) {\n            const data = await historicalDataThirty(this.props.activeTicker)\n            const parsed = data[\"Time Series (Daily)\"]\n            const datesArr = Object.values(parsed).map((e) => +e[\"4. close\"])\n            const oneMonthDataPoints = datesArr.splice(0, 20).reverse()\n            this.setState({data: oneMonthDataPoints})\n        }\n    }\n\n    render() {\n\n        const activeTicker = this.props.activeTicker\n    \n        const currentTicker = () => {\n            if(activeTicker === null) {\n                return \"There is currently no active ticker\"\n            } else {\n                return activeTicker + \" 30 day dataset\"\n            }\n        }\n\n        const config = newChartConfig(new Array(this.state.graphedDays), this.state.data)\n\n        return (\n            <div>\n                <h3>{currentTicker()}</h3>\n                <button onClick={this.handleClick}>test</button>\n                <button onClick={this.handleClickDaily}>1 day</button>\n                <button onClick={this.handleClickThirty}> 30 day </button>\n                <button onClick={this.handleClickNinety}> 90 day</button>\n        \n                <Line data={config} />\n            </div>\n        )\n    }\n}\n\nexport default Graph\n\n\n\n\n\n\n\n\n\n\n\n// import React, { Component } from 'react'\n// import { dailyData } from '../api'\n// import { historicalDataThirty } from '../api'\n// import { historicalDataNinety} from '../api'\n// import { Line } from 'react-chartjs-2'\n\n\n\n\n// export class Graph extends Component {\n//     constructor(props) {\n//         super(props)\n//         this.state = {\n//             graphedDays: 30,\n//             data: {}\n//         }\n//     }\n\n  \n\n\n\n//     handleClick = async () => {\n        \n//     }\n\n//     handleClickDaily = async () => {\n//         this.setState({\n//             graphedDays:1\n//         })\n//     }\n\n//     handleClickThirty = async () => {\n//         this.setState({\n//             graphedDays: 30\n//         })\n//     }\n\n//     handleClickNinety = async () => {\n//         this.setState({\n//             graphedDays: 90\n//         })\n//     }\n\n    \n\n\n//     render() {\n\n//         const activeTicker = this.props.activeTicker\n//         const graphedDays = this.state.graphedDays\n    \n\n//         const currentTicker = () => {\n//             if(activeTicker === null) {\n//                 return \"There is currently no active ticker\"\n//             } else {\n//                 return activeTicker + \" 30 day dataset\"\n//             }\n//         }\n\n//         const test = () => {\n//             let testData = []\n//             for(let i = 0; i <= 30; i++) {\n//                 testData.push(i)\n//             }\n//             return testData\n//         }\n\n//         const test2 = async () => {\n//             const data = await historicalDataThirty(this.props.activeTicker)\n//             const parsed = data[\"Time Series (Daily)\"]\n//             const datesArr = Object.values(parsed).map((e) => +e[\"4. close\"])\n//             const oneMonthDataPoints = datesArr.splice(0, 20).reverse()\n//             console.log(oneMonthDataPoints)\n//         }\n\n//         const pushNumberOfDays = () => {\n//             let labels = []\n//             if(graphedDays === 30) {\n//                 for(let i = 1; i <= 30; i++){\n//                     labels.push(i.toString())\n//                 } \n//             } else {\n//                 for(let i = 1; i <= 90; i++) {\n//                     labels.push(i.toString())\n//                 }\n//             }\n//             return labels;\n//         }\n\n    \n\n//         const data = {\n//             labels: pushNumberOfDays(),\n//             datasets: [\n//               {\n//                 label: currentTicker(),\n//                 fill: false,\n//                 lineTension: 0.1,\n//                 backgroundColor: 'rgba(75,192,192,0.4)',\n//                 borderColor: 'rgba(75,192,192,1)',\n//                 borderCapStyle: 'butt',\n//                 borderDash: [],\n//                 borderDashOffset: 0.0,\n//                 borderJoinStyle: 'miter',\n//                 pointBorderColor: 'rgba(75,192,192,1)',\n//                 pointBackgroundColor: '#fff',\n//                 pointBorderWidth: 1,\n//                 pointHoverRadius: 5,\n//                 pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n//                 pointHoverBorderColor: 'rgba(220,220,220,1)',\n//                 pointHoverBorderWidth: 2,\n//                 pointRadius: 1,\n//                 pointHitRadius: 10,\n//                 data: test2()\n//               }\n//             ]\n//           };\n\n//         return (\n//             <div>\n//                 <button onClick={this.handleClick}>test</button>\n//                 <button onClick={this.handleClickDaily}>1 day</button>\n//                 <button onClick={this.handleClickThirty}> 30 day </button>\n//                 <button onClick={this.handleClickNinety}> 90 day</button>\n        \n//                 <Line data={data} />\n//             </div>\n//         )\n//     }\n// }\n\n// export default Graph\n"]},"metadata":{},"sourceType":"module"}