{"ast":null,"code":"var _jsxFileName = \"/Users/jaredricardo/Desktop/apps/testing-api/src/components/Graph.js\";\nimport React, { Component } from 'react';\nimport { dailyData } from '../api';\nimport { historicalDataThirty } from '../api';\nimport { historicalDataNinety } from '../api';\nimport { Line } from 'react-chartjs-2';\nexport class Graph extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = async () => {\n      this.setState({\n        datasets,\n        data: [11, 55, 11, 55, 11, 55]\n      });\n    };\n\n    this.handleClickDaily = async () => {\n      this.setState({\n        graphedDays: 1\n      });\n    };\n\n    this.handleClickThirty = async () => {\n      this.setState({\n        graphedDays: 30\n      });\n    };\n\n    this.handleClickNinety = async () => {\n      this.setState({\n        graphedDays: 90\n      });\n    };\n\n    this.state = {\n      graphedDays: 30,\n      data: {\n        labels: [1, 2, 3, 4, 5, 6],\n        datasets: [{\n          label: 'CURRENT TICKER day graph',\n          fill: false,\n          lineTension: 0.1,\n          backgroundColor: 'rgba(75,192,192,0.4)',\n          borderColor: 'rgba(75,192,192,1)',\n          borderCapStyle: 'butt',\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: 'miter',\n          pointBorderColor: 'rgba(75,192,192,1)',\n          pointBackgroundColor: '#fff',\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\n          pointHoverBorderWidth: 2,\n          pointRadius: 1,\n          pointHitRadius: 10,\n          data: [11, 22, 33, 44, 55, 66]\n        }]\n      }\n    };\n  }\n\n  render() {\n    const activeTicker = this.props.activeTicker;\n    const graphedDays = this.state.graphedDays;\n\n    const currentTicker = () => {\n      if (activeTicker === null) {\n        return \"There is currently no active ticker\";\n      } else {\n        return activeTicker + \" 30 day dataset\";\n      }\n    };\n\n    const test = () => {\n      let testData = [];\n\n      for (let i = 0; i <= 30; i++) {\n        testData.push(i);\n      }\n\n      return testData;\n    };\n\n    const test2 = async () => {\n      const data = await historicalDataThirty(this.props.activeTicker);\n      const parsed = data[\"Time Series (Daily)\"];\n      const datesArr = Object.values(parsed).map(e => +e[\"4. close\"]);\n      const oneMonthDataPoints = datesArr.splice(0, 20).reverse();\n      console.log(oneMonthDataPoints);\n    };\n\n    const pushNumberOfDays = () => {\n      let labels = [];\n\n      if (graphedDays === 30) {\n        for (let i = 1; i <= 30; i++) {\n          labels.push(i.toString());\n        }\n      } else {\n        for (let i = 1; i <= 90; i++) {\n          labels.push(i.toString());\n        }\n      }\n\n      return labels;\n    };\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }\n    }, \"test\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleClickDaily,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }\n    }, \"1 day\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleClickThirty,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }\n    }, \" 30 day \"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleClickNinety,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }\n    }, \" 90 day\"), /*#__PURE__*/React.createElement(Line, {\n      data: this.state.data,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\nexport default Graph; // import React, { Component } from 'react'\n// import { dailyData } from '../api'\n// import { historicalDataThirty } from '../api'\n// import { historicalDataNinety} from '../api'\n// import { Line } from 'react-chartjs-2'\n// export class Graph extends Component {\n//     constructor(props) {\n//         super(props)\n//         this.state = {\n//             graphedDays: 30,\n//             data: {}\n//         }\n//     }\n//     handleClick = async () => {\n//     }\n//     handleClickDaily = async () => {\n//         this.setState({\n//             graphedDays:1\n//         })\n//     }\n//     handleClickThirty = async () => {\n//         this.setState({\n//             graphedDays: 30\n//         })\n//     }\n//     handleClickNinety = async () => {\n//         this.setState({\n//             graphedDays: 90\n//         })\n//     }\n//     render() {\n//         const activeTicker = this.props.activeTicker\n//         const graphedDays = this.state.graphedDays\n//         const currentTicker = () => {\n//             if(activeTicker === null) {\n//                 return \"There is currently no active ticker\"\n//             } else {\n//                 return activeTicker + \" 30 day dataset\"\n//             }\n//         }\n//         const test = () => {\n//             let testData = []\n//             for(let i = 0; i <= 30; i++) {\n//                 testData.push(i)\n//             }\n//             return testData\n//         }\n//         const test2 = async () => {\n//             const data = await historicalDataThirty(this.props.activeTicker)\n//             const parsed = data[\"Time Series (Daily)\"]\n//             const datesArr = Object.values(parsed).map((e) => +e[\"4. close\"])\n//             const oneMonthDataPoints = datesArr.splice(0, 20).reverse()\n//             console.log(oneMonthDataPoints)\n//         }\n//         const pushNumberOfDays = () => {\n//             let labels = []\n//             if(graphedDays === 30) {\n//                 for(let i = 1; i <= 30; i++){\n//                     labels.push(i.toString())\n//                 } \n//             } else {\n//                 for(let i = 1; i <= 90; i++) {\n//                     labels.push(i.toString())\n//                 }\n//             }\n//             return labels;\n//         }\n//         const data = {\n//             labels: pushNumberOfDays(),\n//             datasets: [\n//               {\n//                 label: currentTicker(),\n//                 fill: false,\n//                 lineTension: 0.1,\n//                 backgroundColor: 'rgba(75,192,192,0.4)',\n//                 borderColor: 'rgba(75,192,192,1)',\n//                 borderCapStyle: 'butt',\n//                 borderDash: [],\n//                 borderDashOffset: 0.0,\n//                 borderJoinStyle: 'miter',\n//                 pointBorderColor: 'rgba(75,192,192,1)',\n//                 pointBackgroundColor: '#fff',\n//                 pointBorderWidth: 1,\n//                 pointHoverRadius: 5,\n//                 pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n//                 pointHoverBorderColor: 'rgba(220,220,220,1)',\n//                 pointHoverBorderWidth: 2,\n//                 pointRadius: 1,\n//                 pointHitRadius: 10,\n//                 data: test2()\n//               }\n//             ]\n//           };\n//         return (\n//             <div>\n//                 <button onClick={this.handleClick}>test</button>\n//                 <button onClick={this.handleClickDaily}>1 day</button>\n//                 <button onClick={this.handleClickThirty}> 30 day </button>\n//                 <button onClick={this.handleClickNinety}> 90 day</button>\n//                 <Line data={data} />\n//             </div>\n//         )\n//     }\n// }\n// export default Graph","map":{"version":3,"sources":["/Users/jaredricardo/Desktop/apps/testing-api/src/components/Graph.js"],"names":["React","Component","dailyData","historicalDataThirty","historicalDataNinety","Line","Graph","constructor","props","handleClick","setState","datasets","data","handleClickDaily","graphedDays","handleClickThirty","handleClickNinety","state","labels","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","render","activeTicker","currentTicker","test","testData","i","push","test2","parsed","datesArr","Object","values","map","e","oneMonthDataPoints","splice","reverse","console","log","pushNumberOfDays","toString"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,SAAT,QAA0B,QAA1B;AACA,SAASC,oBAAT,QAAqC,QAArC;AACA,SAASC,oBAAT,QAAoC,QAApC;AACA,SAASC,IAAT,QAAqB,iBAArB;AAIA,OAAO,MAAMC,KAAN,SAAoBL,SAApB,CAA8B;AACjCM,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAqCnBC,WArCmB,GAqCL,YAAY;AACtB,WAAKC,QAAL,CAAc;AACVC,QAAAA,QADU;AACDC,QAAAA,IAAI,EAAE,CAAC,EAAD,EAAI,EAAJ,EAAO,EAAP,EAAU,EAAV,EAAa,EAAb,EAAgB,EAAhB;AADL,OAAd;AAGH,KAzCkB;;AAAA,SA2CnBC,gBA3CmB,GA2CA,YAAY;AAC3B,WAAKH,QAAL,CAAc;AACVI,QAAAA,WAAW,EAAC;AADF,OAAd;AAGH,KA/CkB;;AAAA,SAiDnBC,iBAjDmB,GAiDC,YAAY;AAC5B,WAAKL,QAAL,CAAc;AACVI,QAAAA,WAAW,EAAE;AADH,OAAd;AAGH,KArDkB;;AAAA,SAuDnBE,iBAvDmB,GAuDC,YAAY;AAC5B,WAAKN,QAAL,CAAc;AACVI,QAAAA,WAAW,EAAE;AADH,OAAd;AAGH,KA3DkB;;AAEf,SAAKG,KAAL,GAAa;AACTH,MAAAA,WAAW,EAAE,EADJ;AAETF,MAAAA,IAAI,EAAE;AACFM,QAAAA,MAAM,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,CADN;AAEFP,QAAAA,QAAQ,EAAE,CACR;AACEQ,UAAAA,KAAK,EAAE,0BADT;AAEEC,UAAAA,IAAI,EAAE,KAFR;AAGEC,UAAAA,WAAW,EAAE,GAHf;AAIEC,UAAAA,eAAe,EAAE,sBAJnB;AAKEC,UAAAA,WAAW,EAAE,oBALf;AAMEC,UAAAA,cAAc,EAAE,MANlB;AAOEC,UAAAA,UAAU,EAAE,EAPd;AAQEC,UAAAA,gBAAgB,EAAE,GARpB;AASEC,UAAAA,eAAe,EAAE,OATnB;AAUEC,UAAAA,gBAAgB,EAAE,oBAVpB;AAWEC,UAAAA,oBAAoB,EAAE,MAXxB;AAYEC,UAAAA,gBAAgB,EAAE,CAZpB;AAaEC,UAAAA,gBAAgB,EAAE,CAbpB;AAcEC,UAAAA,yBAAyB,EAAE,oBAd7B;AAeEC,UAAAA,qBAAqB,EAAE,qBAfzB;AAgBEC,UAAAA,qBAAqB,EAAE,CAhBzB;AAiBEC,UAAAA,WAAW,EAAE,CAjBf;AAkBEC,UAAAA,cAAc,EAAE,EAlBlB;AAmBExB,UAAAA,IAAI,EAAE,CAAC,EAAD,EAAI,EAAJ,EAAO,EAAP,EAAU,EAAV,EAAa,EAAb,EAAgB,EAAhB;AAnBR,SADQ;AAFR;AAFG,KAAb;AA6BH;;AAiCDyB,EAAAA,MAAM,GAAG;AAEL,UAAMC,YAAY,GAAG,KAAK9B,KAAL,CAAW8B,YAAhC;AACA,UAAMxB,WAAW,GAAG,KAAKG,KAAL,CAAWH,WAA/B;;AAEA,UAAMyB,aAAa,GAAG,MAAM;AACxB,UAAGD,YAAY,KAAK,IAApB,EAA0B;AACtB,eAAO,qCAAP;AACH,OAFD,MAEO;AACH,eAAOA,YAAY,GAAG,iBAAtB;AACH;AACJ,KAND;;AAQA,UAAME,IAAI,GAAG,MAAM;AACf,UAAIC,QAAQ,GAAG,EAAf;;AACA,WAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,IAAI,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzBD,QAAAA,QAAQ,CAACE,IAAT,CAAcD,CAAd;AACH;;AACD,aAAOD,QAAP;AACH,KAND;;AAQA,UAAMG,KAAK,GAAG,YAAY;AACtB,YAAMhC,IAAI,GAAG,MAAMT,oBAAoB,CAAC,KAAKK,KAAL,CAAW8B,YAAZ,CAAvC;AACA,YAAMO,MAAM,GAAGjC,IAAI,CAAC,qBAAD,CAAnB;AACA,YAAMkC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAcH,MAAd,EAAsBI,GAAtB,CAA2BC,CAAD,IAAO,CAACA,CAAC,CAAC,UAAD,CAAnC,CAAjB;AACA,YAAMC,kBAAkB,GAAGL,QAAQ,CAACM,MAAT,CAAgB,CAAhB,EAAmB,EAAnB,EAAuBC,OAAvB,EAA3B;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,kBAAZ;AACH,KAND;;AAQA,UAAMK,gBAAgB,GAAG,MAAM;AAC3B,UAAItC,MAAM,GAAG,EAAb;;AACA,UAAGJ,WAAW,KAAK,EAAnB,EAAuB;AACnB,aAAI,IAAI4B,CAAC,GAAG,CAAZ,EAAeA,CAAC,IAAI,EAApB,EAAwBA,CAAC,EAAzB,EAA4B;AACxBxB,UAAAA,MAAM,CAACyB,IAAP,CAAYD,CAAC,CAACe,QAAF,EAAZ;AACH;AACJ,OAJD,MAIO;AACH,aAAI,IAAIf,CAAC,GAAG,CAAZ,EAAeA,CAAC,IAAI,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzBxB,UAAAA,MAAM,CAACyB,IAAP,CAAYD,CAAC,CAACe,QAAF,EAAZ;AACH;AACJ;;AACD,aAAOvC,MAAP;AACH,KAZD;;AAeA,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAQ,MAAA,OAAO,EAAE,KAAKT,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAQ,MAAA,OAAO,EAAE,KAAKI,gBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFJ,eAGI;AAAQ,MAAA,OAAO,EAAE,KAAKE,iBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHJ,eAII;AAAQ,MAAA,OAAO,EAAE,KAAKC,iBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAJJ,eAMI,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAE,KAAKC,KAAL,CAAWL,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANJ,CADJ;AAUH;;AAvHgC;AA0HrC,eAAeN,KAAf,C,CAYA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAKA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import React, { Component } from 'react'\nimport { dailyData } from '../api'\nimport { historicalDataThirty } from '../api'\nimport { historicalDataNinety} from '../api'\nimport { Line } from 'react-chartjs-2'\n\n\n\nexport class Graph extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            graphedDays: 30,\n            data: {\n                labels: [1,2,3,4,5,6],\n                datasets: [\n                  {\n                    label: 'CURRENT TICKER day graph',\n                    fill: false,\n                    lineTension: 0.1,\n                    backgroundColor: 'rgba(75,192,192,0.4)',\n                    borderColor: 'rgba(75,192,192,1)',\n                    borderCapStyle: 'butt',\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    borderJoinStyle: 'miter',\n                    pointBorderColor: 'rgba(75,192,192,1)',\n                    pointBackgroundColor: '#fff',\n                    pointBorderWidth: 1,\n                    pointHoverRadius: 5,\n                    pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n                    pointHoverBorderColor: 'rgba(220,220,220,1)',\n                    pointHoverBorderWidth: 2,\n                    pointRadius: 1,\n                    pointHitRadius: 10,\n                    data: [11,22,33,44,55,66]\n                  }\n                ]\n            }\n        }\n    }\n\n\n\n\n\n    handleClick = async () => {\n        this.setState({\n            datasets,data: [11,55,11,55,11,55]\n        })\n    }\n\n    handleClickDaily = async () => {\n        this.setState({\n            graphedDays:1\n        })\n    }\n\n    handleClickThirty = async () => {\n        this.setState({\n            graphedDays: 30\n        })\n    }\n\n    handleClickNinety = async () => {\n        this.setState({\n            graphedDays: 90\n        })\n    }\n\n    \n\n\n    render() {\n\n        const activeTicker = this.props.activeTicker\n        const graphedDays = this.state.graphedDays\n    \n        const currentTicker = () => {\n            if(activeTicker === null) {\n                return \"There is currently no active ticker\"\n            } else {\n                return activeTicker + \" 30 day dataset\"\n            }\n        }\n\n        const test = () => {\n            let testData = []\n            for(let i = 0; i <= 30; i++) {\n                testData.push(i)\n            }\n            return testData\n        }\n\n        const test2 = async () => {\n            const data = await historicalDataThirty(this.props.activeTicker)\n            const parsed = data[\"Time Series (Daily)\"]\n            const datesArr = Object.values(parsed).map((e) => +e[\"4. close\"])\n            const oneMonthDataPoints = datesArr.splice(0, 20).reverse()\n            console.log(oneMonthDataPoints)\n        }\n\n        const pushNumberOfDays = () => {\n            let labels = []\n            if(graphedDays === 30) {\n                for(let i = 1; i <= 30; i++){\n                    labels.push(i.toString())\n                } \n            } else {\n                for(let i = 1; i <= 90; i++) {\n                    labels.push(i.toString())\n                }\n            }\n            return labels;\n        }\n\n\n        return (\n            <div>\n                <button onClick={this.handleClick}>test</button>\n                <button onClick={this.handleClickDaily}>1 day</button>\n                <button onClick={this.handleClickThirty}> 30 day </button>\n                <button onClick={this.handleClickNinety}> 90 day</button>\n        \n                <Line data={this.state.data} />\n            </div>\n        )\n    }\n}\n\nexport default Graph\n\n\n\n\n\n\n\n\n\n\n\n// import React, { Component } from 'react'\n// import { dailyData } from '../api'\n// import { historicalDataThirty } from '../api'\n// import { historicalDataNinety} from '../api'\n// import { Line } from 'react-chartjs-2'\n\n\n\n\n// export class Graph extends Component {\n//     constructor(props) {\n//         super(props)\n//         this.state = {\n//             graphedDays: 30,\n//             data: {}\n//         }\n//     }\n\n  \n\n\n\n//     handleClick = async () => {\n        \n//     }\n\n//     handleClickDaily = async () => {\n//         this.setState({\n//             graphedDays:1\n//         })\n//     }\n\n//     handleClickThirty = async () => {\n//         this.setState({\n//             graphedDays: 30\n//         })\n//     }\n\n//     handleClickNinety = async () => {\n//         this.setState({\n//             graphedDays: 90\n//         })\n//     }\n\n    \n\n\n//     render() {\n\n//         const activeTicker = this.props.activeTicker\n//         const graphedDays = this.state.graphedDays\n    \n\n//         const currentTicker = () => {\n//             if(activeTicker === null) {\n//                 return \"There is currently no active ticker\"\n//             } else {\n//                 return activeTicker + \" 30 day dataset\"\n//             }\n//         }\n\n//         const test = () => {\n//             let testData = []\n//             for(let i = 0; i <= 30; i++) {\n//                 testData.push(i)\n//             }\n//             return testData\n//         }\n\n//         const test2 = async () => {\n//             const data = await historicalDataThirty(this.props.activeTicker)\n//             const parsed = data[\"Time Series (Daily)\"]\n//             const datesArr = Object.values(parsed).map((e) => +e[\"4. close\"])\n//             const oneMonthDataPoints = datesArr.splice(0, 20).reverse()\n//             console.log(oneMonthDataPoints)\n//         }\n\n//         const pushNumberOfDays = () => {\n//             let labels = []\n//             if(graphedDays === 30) {\n//                 for(let i = 1; i <= 30; i++){\n//                     labels.push(i.toString())\n//                 } \n//             } else {\n//                 for(let i = 1; i <= 90; i++) {\n//                     labels.push(i.toString())\n//                 }\n//             }\n//             return labels;\n//         }\n\n    \n\n//         const data = {\n//             labels: pushNumberOfDays(),\n//             datasets: [\n//               {\n//                 label: currentTicker(),\n//                 fill: false,\n//                 lineTension: 0.1,\n//                 backgroundColor: 'rgba(75,192,192,0.4)',\n//                 borderColor: 'rgba(75,192,192,1)',\n//                 borderCapStyle: 'butt',\n//                 borderDash: [],\n//                 borderDashOffset: 0.0,\n//                 borderJoinStyle: 'miter',\n//                 pointBorderColor: 'rgba(75,192,192,1)',\n//                 pointBackgroundColor: '#fff',\n//                 pointBorderWidth: 1,\n//                 pointHoverRadius: 5,\n//                 pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n//                 pointHoverBorderColor: 'rgba(220,220,220,1)',\n//                 pointHoverBorderWidth: 2,\n//                 pointRadius: 1,\n//                 pointHitRadius: 10,\n//                 data: test2()\n//               }\n//             ]\n//           };\n\n//         return (\n//             <div>\n//                 <button onClick={this.handleClick}>test</button>\n//                 <button onClick={this.handleClickDaily}>1 day</button>\n//                 <button onClick={this.handleClickThirty}> 30 day </button>\n//                 <button onClick={this.handleClickNinety}> 90 day</button>\n        \n//                 <Line data={data} />\n//             </div>\n//         )\n//     }\n// }\n\n// export default Graph\n"]},"metadata":{},"sourceType":"module"}