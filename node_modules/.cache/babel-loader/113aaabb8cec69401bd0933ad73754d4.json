{"ast":null,"code":"export function createNode(ch) {\n  this.ch = ch;\n  this.isTerminal = false;\n  this.map = {};\n  this.words = [];\n}\nexport function add(str, i, root) {\n  if (i === str.length) {\n    root.isTerminal = true;\n    return;\n  }\n\n  if (!root.map[str[i]]) {\n    root.map[str[i]] = new createNode(str[i]);\n  }\n\n  root.words.push(str);\n  add(str, i + 1, root.map[str[i]]);\n}\nexport function suggest(str, i, root) {\n  if (i === str.length) {\n    return root.words;\n  }\n\n  if (!root.map[str[i]]) {\n    return [];\n  }\n\n  return suggest(str, i + 1, root.map[str[i]]);\n}","map":{"version":3,"sources":["/Users/jaredricardo/Desktop/apps/testing-api-copy/src/components/jaredstrie.js"],"names":["createNode","ch","isTerminal","map","words","add","str","i","root","length","push","suggest"],"mappings":"AAAA,OAAO,SAASA,UAAT,CAAoBC,EAApB,EAAwB;AAC3B,OAAKA,EAAL,GAAUA,EAAV;AACA,OAAKC,UAAL,GAAkB,KAAlB;AACA,OAAKC,GAAL,GAAW,EAAX;AACA,OAAKC,KAAL,GAAa,EAAb;AACH;AAED,OAAO,SAASC,GAAT,CAAaC,GAAb,EAAkBC,CAAlB,EAAqBC,IAArB,EAA2B;AAE9B,MAAGD,CAAC,KAAKD,GAAG,CAACG,MAAb,EAAqB;AACjBD,IAAAA,IAAI,CAACN,UAAL,GAAkB,IAAlB;AACA;AACH;;AAED,MAAG,CAACM,IAAI,CAACL,GAAL,CAASG,GAAG,CAACC,CAAD,CAAZ,CAAJ,EAAsB;AAClBC,IAAAA,IAAI,CAACL,GAAL,CAASG,GAAG,CAACC,CAAD,CAAZ,IAAmB,IAAIP,UAAJ,CAAeM,GAAG,CAACC,CAAD,CAAlB,CAAnB;AACH;;AACDC,EAAAA,IAAI,CAACJ,KAAL,CAAWM,IAAX,CAAgBJ,GAAhB;AACAD,EAAAA,GAAG,CAACC,GAAD,EAAMC,CAAC,GAAG,CAAV,EAAaC,IAAI,CAACL,GAAL,CAASG,GAAG,CAACC,CAAD,CAAZ,CAAb,CAAH;AACH;AAED,OAAO,SAASI,OAAT,CAAiBL,GAAjB,EAAsBC,CAAtB,EAAyBC,IAAzB,EAA+B;AAElC,MAAGD,CAAC,KAAKD,GAAG,CAACG,MAAb,EAAqB;AACjB,WAAOD,IAAI,CAACJ,KAAZ;AACH;;AACD,MAAG,CAACI,IAAI,CAACL,GAAL,CAASG,GAAG,CAACC,CAAD,CAAZ,CAAJ,EAAqB;AACjB,WAAO,EAAP;AACH;;AACD,SAAOI,OAAO,CAACL,GAAD,EAAMC,CAAC,GAAG,CAAV,EAAaC,IAAI,CAACL,GAAL,CAASG,GAAG,CAACC,CAAD,CAAZ,CAAb,CAAd;AACH","sourcesContent":["export function createNode(ch) {\n    this.ch = ch\n    this.isTerminal = false\n    this.map = {}\n    this.words = []\n}\n\nexport function add(str, i, root) {\n\n    if(i === str.length) {\n        root.isTerminal = true\n        return\n    }\n\n    if(!root.map[str[i]]) {\n        root.map[str[i]] = new createNode(str[i])\n    }\n    root.words.push(str)\n    add(str, i + 1, root.map[str[i]])\n}\n\nexport function suggest(str, i, root) {\n\n    if(i === str.length) {\n        return root.words\n    } \n    if(!root.map[str[i]]){\n        return []\n    }\n    return suggest(str, i + 1, root.map[str[i]])\n}"]},"metadata":{},"sourceType":"module"}