{"ast":null,"code":"export function createNode(ch){this.ch=ch;this.isTerminal=false;this.map={};this.words=[];}export function add(str,i,root){if(i===str.length){root.isTerminal=true;return;}if(!root.map[str[i]])root.map[str[i]]=new createNode(str[i]);root.words.push(str);add(str,i+1,root.map[str[i]]);}export function suggest(str,i,root){if(i===str.length)return root.words;if(!root.map[str[i]]){return[];}return suggest(str,i+1,root.map[str[i]]);}","map":{"version":3,"sources":["/Users/jaredricardo/Desktop/apps/stock screener/src/components/trie.js"],"names":["createNode","ch","isTerminal","map","words","add","str","i","root","length","push","suggest"],"mappings":"AAAA,MAAO,SAASA,CAAAA,UAAT,CAAoBC,EAApB,CAAwB,CAC3B,KAAKA,EAAL,CAAUA,EAAV,CACA,KAAKC,UAAL,CAAkB,KAAlB,CACA,KAAKC,GAAL,CAAW,EAAX,CACA,KAAKC,KAAL,CAAa,EAAb,CACH,CAED,MAAO,SAASC,CAAAA,GAAT,CAAaC,GAAb,CAAkBC,CAAlB,CAAqBC,IAArB,CAA2B,CAE9B,GAAGD,CAAC,GAAKD,GAAG,CAACG,MAAb,CAAqB,CACjBD,IAAI,CAACN,UAAL,CAAkB,IAAlB,CACA,OACH,CAED,GAAG,CAACM,IAAI,CAACL,GAAL,CAASG,GAAG,CAACC,CAAD,CAAZ,CAAJ,CACIC,IAAI,CAACL,GAAL,CAASG,GAAG,CAACC,CAAD,CAAZ,EAAmB,GAAIP,CAAAA,UAAJ,CAAeM,GAAG,CAACC,CAAD,CAAlB,CAAnB,CAEJC,IAAI,CAACJ,KAAL,CAAWM,IAAX,CAAgBJ,GAAhB,EACAD,GAAG,CAACC,GAAD,CAAMC,CAAC,CAAG,CAAV,CAAaC,IAAI,CAACL,GAAL,CAASG,GAAG,CAACC,CAAD,CAAZ,CAAb,CAAH,CACH,CAED,MAAO,SAASI,CAAAA,OAAT,CAAiBL,GAAjB,CAAsBC,CAAtB,CAAyBC,IAAzB,CAA+B,CAElC,GAAGD,CAAC,GAAKD,GAAG,CAACG,MAAb,CACI,MAAOD,CAAAA,IAAI,CAACJ,KAAZ,CAEJ,GAAG,CAACI,IAAI,CAACL,GAAL,CAASG,GAAG,CAACC,CAAD,CAAZ,CAAJ,CAAqB,CACjB,MAAO,EAAP,CACH,CACD,MAAOI,CAAAA,OAAO,CAACL,GAAD,CAAMC,CAAC,CAAG,CAAV,CAAaC,IAAI,CAACL,GAAL,CAASG,GAAG,CAACC,CAAD,CAAZ,CAAb,CAAd,CACH","sourcesContent":["export function createNode(ch) {\n    this.ch = ch\n    this.isTerminal = false\n    this.map = {}\n    this.words = []\n}\n\nexport function add(str, i, root) {\n\n    if(i === str.length) {\n        root.isTerminal = true\n        return \n    }\n\n    if(!root.map[str[i]]) \n        root.map[str[i]] = new createNode(str[i])\n    \n    root.words.push(str)\n    add(str, i + 1, root.map[str[i]])\n}\n\nexport function suggest(str, i, root) {\n\n    if(i === str.length)  \n        return root.words\n    \n    if(!root.map[str[i]]){\n        return []\n    }\n    return suggest(str, i + 1, root.map[str[i]])\n} "]},"metadata":{},"sourceType":"module"}