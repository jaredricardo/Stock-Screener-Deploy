{"ast":null,"code":"var _jsxFileName = \"/Users/jaredricardo/Desktop/apps/testing-api/src/components/Graph.js\";\nimport React, { Component } from 'react';\nimport { dailyData } from '../api';\nimport { historicalDataThirty } from '../api';\nimport { historicalDataNinety } from '../api';\nimport { Line } from 'react-chartjs-2';\n\nfunction newChartConfig(labels, data, activeTicker) {\n  return {\n    labels: labels,\n    datasets: [{\n      label: activeTicker + ' x ' + 'day graph',\n      fill: false,\n      lineTension: 0,\n      backgroundColor: 'rgba(75,192,192,0.4)',\n      borderColor: 'rgba(75,192,192,1)',\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: 'rgba(75,192,192,1)',\n      pointBackgroundColor: '#fff',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n      pointHoverBorderColor: 'rgba(220,220,220,1)',\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: data\n    }]\n  };\n}\n\nexport class Graph extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleTestClick = async () => {\n      const data = await dailyData(this.props.activeTicker);\n      const parsed = data[\"Time Series (5min)\"];\n      const arr = Object.values(parsed).map(e => +e[\"3. low\"]);\n      const dailyDataArr = arr.splice(0, arr.length).reverse();\n      console.log(dailyDataArr);\n    };\n\n    this.handleClickDaily = async () => {\n      this.setState({\n        graphedDays: 1,\n        dataPointsNeeded: 100\n      });\n    };\n\n    this.handleClickThirty = async () => {\n      this.setState({\n        graphedDays: 30,\n        dataPointsNeeded: 30\n      });\n    };\n\n    this.handleClickNinety = async () => {\n      this.setState({\n        graphedDays: 90,\n        dataPointsNeeded: 90\n      });\n    };\n\n    this.handleLabelChange = () => {};\n\n    this.updateData = async () => {\n      if (this.props.activeTicker === null) return; // same as return null \n\n      if (this.state.graphedDays === 1) {\n        const data = await dailyData(this.props.activeTicker);\n        const parsed = data[\"Time Series (5min)\"];\n        const arr = Object.values(parsed).map(e => +e[\"3. low\"]);\n        const dailyDataArr = arr.splice(0, arr.length).reverse();\n        this.setState({\n          data: dailyDataArr\n        });\n      } else if (this.state.graphedDays === 30) {\n        const data = await historicalDataThirty(this.props.activeTicker);\n        const parsed = data[\"Time Series (Daily)\"];\n        const datesArr = Object.values(parsed).map(e => +e[\"4. close\"]);\n        const oneMonthDataPoints = datesArr.splice(0, 30).reverse();\n        this.setState({\n          data: oneMonthDataPoints\n        });\n      } else if (this.state.graphedDays === 90) {\n        const data = await historicalDataNinety(this.props.activeTicker);\n        const parsed = data[\"Time Series (Daily)\"];\n        const datesArr = Object.values(parsed).map(e => +e[\"4. close\"]);\n        const threeMonthDataPoints = datesArr.splice(0, 90).reverse();\n        this.setState({\n          data: threeMonthDataPoints\n        });\n      }\n    };\n\n    this.state = {\n      graphedDays: 30,\n      dataPointsNeeded: 30,\n      data: null\n    };\n  }\n\n  async componentDidMount(prevProps) {\n    this.updateData();\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    if (prevProps.activeTicker !== this.props.activeTicker || prevState.graphedDays !== this.state.graphedDays) {\n      this.updateData();\n    }\n  }\n\n  render() {\n    const activeTicker = this.props.activeTicker;\n    const dataPoints = Array.from(Array(this.state.dataPointsNeeded).keys());\n    const config = newChartConfig(dataPoints, this.state.data, activeTicker);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleTestClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }\n    }, \"test\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleClickDaily,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }\n    }, \"1 day\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleClickThirty,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }\n    }, \" 30 day \"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleClickNinety,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }\n    }, \" 90 day\"), /*#__PURE__*/React.createElement(Line, {\n      data: config,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\nexport default Graph; // import React, { Component } from 'react'\n// import { dailyData } from '../api'\n// import { historicalDataThirty } from '../api'\n// import { historicalDataNinety} from '../api'\n// import { Line } from 'react-chartjs-2'\n// export class Graph extends Component {\n//     constructor(props) {\n//         super(props)\n//         this.state = {\n//             graphedDays: 30,\n//             data: {}\n//         }\n//     }\n//     handleClick = async () => {\n//     }\n//     handleClickDaily = async () => {\n//         this.setState({\n//             graphedDays:1\n//         })\n//     }\n//     handleClickThirty = async () => {\n//         this.setState({\n//             graphedDays: 30\n//         })\n//     }\n//     handleClickNinety = async () => {\n//         this.setState({\n//             graphedDays: 90\n//         })\n//     }\n//     render() {\n//         const activeTicker = this.props.activeTicker\n//         const graphedDays = this.state.graphedDays\n//         const currentTicker = () => {\n//             if(activeTicker === null) {\n//                 return \"There is currently no active ticker\"\n//             } else {\n//                 return activeTicker + \" 30 day dataset\"\n//             }\n//         }\n//         const test = () => {\n//             let testData = []\n//             for(let i = 0; i <= 30; i++) {\n//                 testData.push(i)\n//             }\n//             return testData\n//         }\n//         const test2 = async () => {\n//             const data = await historicalDataThirty(this.props.activeTicker)\n//             const parsed = data[\"Time Series (Daily)\"]\n//             const datesArr = Object.values(parsed).map((e) => +e[\"4. close\"])\n//             const oneMonthDataPoints = datesArr.splice(0, 20).reverse()\n//             console.log(oneMonthDataPoints)\n//         }\n//         const pushNumberOfDays = () => {\n//             let labels = []\n//             if(graphedDays === 30) {\n//                 for(let i = 1; i <= 30; i++){\n//                     labels.push(i.toString())\n//                 } \n//             } else {\n//                 for(let i = 1; i <= 90; i++) {\n//                     labels.push(i.toString())\n//                 }\n//             }\n//             return labels;\n//         }\n//         const data = {\n//             labels: pushNumberOfDays(),\n//             datasets: [\n//               {\n//                 label: currentTicker(),\n//                 fill: false,\n//                 lineTension: 0.1,\n//                 backgroundColor: 'rgba(75,192,192,0.4)',\n//                 borderColor: 'rgba(75,192,192,1)',\n//                 borderCapStyle: 'butt',\n//                 borderDash: [],\n//                 borderDashOffset: 0.0,\n//                 borderJoinStyle: 'miter',\n//                 pointBorderColor: 'rgba(75,192,192,1)',\n//                 pointBackgroundColor: '#fff',\n//                 pointBorderWidth: 1,\n//                 pointHoverRadius: 5,\n//                 pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n//                 pointHoverBorderColor: 'rgba(220,220,220,1)',\n//                 pointHoverBorderWidth: 2,\n//                 pointRadius: 1,\n//                 pointHitRadius: 10,\n//                 data: test2()\n//               }\n//             ]\n//           };\n//         return (\n//             <div>\n//                 <button onClick={this.handleClick}>test</button>\n//                 <button onClick={this.handleClickDaily}>1 day</button>\n//                 <button onClick={this.handleClickThirty}> 30 day </button>\n//                 <button onClick={this.handleClickNinety}> 90 day</button>\n//                 <Line data={data} />\n//             </div>\n//         )\n//     }\n// }\n// export default Graph","map":{"version":3,"sources":["/Users/jaredricardo/Desktop/apps/testing-api/src/components/Graph.js"],"names":["React","Component","dailyData","historicalDataThirty","historicalDataNinety","Line","newChartConfig","labels","data","activeTicker","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","Graph","constructor","props","handleTestClick","parsed","arr","Object","values","map","e","dailyDataArr","splice","length","reverse","console","log","handleClickDaily","setState","graphedDays","dataPointsNeeded","handleClickThirty","handleClickNinety","handleLabelChange","updateData","state","datesArr","oneMonthDataPoints","threeMonthDataPoints","componentDidMount","prevProps","componentDidUpdate","prevState","render","dataPoints","Array","from","keys","config"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { dailyData } from '../api'\nimport { historicalDataThirty } from '../api'\nimport { historicalDataNinety} from '../api'\nimport { Line } from 'react-chartjs-2'\n\nfunction newChartConfig(labels, data, activeTicker) {\n    return {\n        labels: labels,\n        datasets: [\n          {\n            label: activeTicker +  ' x ' + 'day graph',\n            fill: false,\n            lineTension: 0,\n            backgroundColor: 'rgba(75,192,192,0.4)',\n            borderColor: 'rgba(75,192,192,1)',\n            borderCapStyle: 'butt',\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: 'miter',\n            pointBorderColor: 'rgba(75,192,192,1)',\n            pointBackgroundColor: '#fff',\n            pointBorderWidth: 1,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n            pointHoverBorderColor: 'rgba(220,220,220,1)',\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            data: data\n          }\n        ]\n    }\n}\n\nexport class Graph extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            graphedDays: 30,\n            dataPointsNeeded: 30,\n            data: null\n        }\n    }\n\n    handleTestClick = async () => {\n        const data = await dailyData(this.props.activeTicker)\n        const parsed = data[\"Time Series (5min)\"]\n        const arr = Object.values(parsed).map((e) => +e[\"3. low\"])\n        const dailyDataArr = arr.splice(0, arr.length).reverse()\n        console.log(dailyDataArr)\n    }\n\n    handleClickDaily = async () => {\n        this.setState({\n            graphedDays:1,\n            dataPointsNeeded: 100\n        })\n    }\n\n    handleClickThirty = async () => {\n        this.setState({\n            graphedDays: 30,\n            dataPointsNeeded: 30\n        })\n    }\n\n    handleClickNinety = async () => {\n        this.setState({\n            graphedDays: 90,\n            dataPointsNeeded: 90\n        })\n    }\n\n    handleLabelChange = () => {\n\n    }\n\n    updateData = async () => {\n        if (this.props.activeTicker === null) return // same as return null \n        if(this.state.graphedDays === 1 ) {\n            const data = await dailyData(this.props.activeTicker)\n            const parsed = data[\"Time Series (5min)\"]\n            const arr = Object.values(parsed).map((e) => +e[\"3. low\"])\n            const dailyDataArr = arr.splice(0, arr.length).reverse()\n            this.setState({data:dailyDataArr})\n        } else if (this.state.graphedDays === 30) {\n            const data = await historicalDataThirty(this.props.activeTicker)\n            const parsed = data[\"Time Series (Daily)\"]\n            const datesArr = Object.values(parsed).map((e) => +e[\"4. close\"])\n            const oneMonthDataPoints = datesArr.splice(0, 30).reverse()\n            this.setState({data: oneMonthDataPoints})\n        } else if (this.state.graphedDays === 90) {\n            const data = await historicalDataNinety(this.props.activeTicker)\n            const parsed = data[\"Time Series (Daily)\"]\n            const datesArr = Object.values(parsed).map((e) => +e[\"4. close\"])\n            const threeMonthDataPoints = datesArr.splice(0, 90).reverse()\n            this.setState({data: threeMonthDataPoints})\n        }\n    }\n\n    async componentDidMount(prevProps) {\n        this.updateData()\n    }\n    \n    async componentDidUpdate(prevProps, prevState) {\n        if (prevProps.activeTicker !== this.props.activeTicker || \n            prevState.graphedDays !== this.state.graphedDays) {\n            this.updateData()\n        }\n    }\n\n    render() {\n\n        const activeTicker = this.props.activeTicker\n\n        const dataPoints = Array.from(Array(this.state.dataPointsNeeded).keys())\n\n        const config = newChartConfig(dataPoints, this.state.data, activeTicker)\n\n        return (\n            <div>\n                <button onClick={this.handleTestClick}>test</button>\n                <button onClick={this.handleClickDaily}>1 day</button>\n                <button onClick={this.handleClickThirty}> 30 day </button>\n                <button onClick={this.handleClickNinety}> 90 day</button>\n        \n                <Line data={config} />\n            </div>\n        )\n    }\n}\n\nexport default Graph\n\n\n\n\n\n\n\n\n\n\n\n// import React, { Component } from 'react'\n// import { dailyData } from '../api'\n// import { historicalDataThirty } from '../api'\n// import { historicalDataNinety} from '../api'\n// import { Line } from 'react-chartjs-2'\n\n\n\n\n// export class Graph extends Component {\n//     constructor(props) {\n//         super(props)\n//         this.state = {\n//             graphedDays: 30,\n//             data: {}\n//         }\n//     }\n\n  \n\n\n\n//     handleClick = async () => {\n        \n//     }\n\n//     handleClickDaily = async () => {\n//         this.setState({\n//             graphedDays:1\n//         })\n//     }\n\n//     handleClickThirty = async () => {\n//         this.setState({\n//             graphedDays: 30\n//         })\n//     }\n\n//     handleClickNinety = async () => {\n//         this.setState({\n//             graphedDays: 90\n//         })\n//     }\n\n    \n\n\n//     render() {\n\n//         const activeTicker = this.props.activeTicker\n//         const graphedDays = this.state.graphedDays\n    \n\n//         const currentTicker = () => {\n//             if(activeTicker === null) {\n//                 return \"There is currently no active ticker\"\n//             } else {\n//                 return activeTicker + \" 30 day dataset\"\n//             }\n//         }\n\n//         const test = () => {\n//             let testData = []\n//             for(let i = 0; i <= 30; i++) {\n//                 testData.push(i)\n//             }\n//             return testData\n//         }\n\n//         const test2 = async () => {\n//             const data = await historicalDataThirty(this.props.activeTicker)\n//             const parsed = data[\"Time Series (Daily)\"]\n//             const datesArr = Object.values(parsed).map((e) => +e[\"4. close\"])\n//             const oneMonthDataPoints = datesArr.splice(0, 20).reverse()\n//             console.log(oneMonthDataPoints)\n//         }\n\n//         const pushNumberOfDays = () => {\n//             let labels = []\n//             if(graphedDays === 30) {\n//                 for(let i = 1; i <= 30; i++){\n//                     labels.push(i.toString())\n//                 } \n//             } else {\n//                 for(let i = 1; i <= 90; i++) {\n//                     labels.push(i.toString())\n//                 }\n//             }\n//             return labels;\n//         }\n\n    \n\n//         const data = {\n//             labels: pushNumberOfDays(),\n//             datasets: [\n//               {\n//                 label: currentTicker(),\n//                 fill: false,\n//                 lineTension: 0.1,\n//                 backgroundColor: 'rgba(75,192,192,0.4)',\n//                 borderColor: 'rgba(75,192,192,1)',\n//                 borderCapStyle: 'butt',\n//                 borderDash: [],\n//                 borderDashOffset: 0.0,\n//                 borderJoinStyle: 'miter',\n//                 pointBorderColor: 'rgba(75,192,192,1)',\n//                 pointBackgroundColor: '#fff',\n//                 pointBorderWidth: 1,\n//                 pointHoverRadius: 5,\n//                 pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n//                 pointHoverBorderColor: 'rgba(220,220,220,1)',\n//                 pointHoverBorderWidth: 2,\n//                 pointRadius: 1,\n//                 pointHitRadius: 10,\n//                 data: test2()\n//               }\n//             ]\n//           };\n\n//         return (\n//             <div>\n//                 <button onClick={this.handleClick}>test</button>\n//                 <button onClick={this.handleClickDaily}>1 day</button>\n//                 <button onClick={this.handleClickThirty}> 30 day </button>\n//                 <button onClick={this.handleClickNinety}> 90 day</button>\n        \n//                 <Line data={data} />\n//             </div>\n//         )\n//     }\n// }\n\n// export default Graph\n"]},"metadata":{},"sourceType":"module"}